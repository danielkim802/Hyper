** Instructions operate on a stack of values and a stack of environments (an 
environment is basically a hashmap from strings -> values). POP pops from the 
value stack and PUSH pushes to the value stack. POP_ENV pops from the environment 
stack and PUSH_ENV pushes to it.
┌────────────────────────────────────────────────────────────────────────────────┐
│                                 *** Instructions for operating on literals *** │
└────────────────────────────────────────────────────────────────────────────────┘
AND                                                                 opcode[ 0x00 ]
	POP --> b
	POP --> a
	a && b --> PUSH

	type a = BOOL
	type b = BOOL
──────────────────────────────────────────────────────────────────────────────────
OR                                                                  opcode[ 0x01 ]
	POP --> b
	POP --> a
	a || b --> PUSH

	type a = BOOL
	type b = BOOL
──────────────────────────────────────────────────────────────────────────────────
NOT                                                                 opcode[ 0x02 ]
	POP --> a
	!a --> PUSH

	type a = BOOL
──────────────────────────────────────────────────────────────────────────────────
LT                                                                  opcode[ 0x03 ]
	POP --> b
	POP --> a
	a < b --> PUSH

	type a = FLOAT | INT
	type b = FLOAT | INT
──────────────────────────────────────────────────────────────────────────────────
LTE                                                                 opcode[ 0x04 ]
	POP --> b
	POP --> a
	a <= b --> PUSH

	type a = FLOAT | INT
	type b = FLOAT | INT
──────────────────────────────────────────────────────────────────────────────────
GT                                                                  opcode[ 0x05 ]
	POP --> b
	POP --> a
	a > b --> PUSH

	type a = FLOAT | INT
	type b = FLOAT | INT
──────────────────────────────────────────────────────────────────────────────────
GTE                                                                 opcode[ 0x06 ]
	POP --> b
	POP --> a
	a >= b --> PUSH

	type a = FLOAT | INT
	type b = FLOAT | INT
──────────────────────────────────────────────────────────────────────────────────
NE                                                                  opcode[ 0x07 ]
	POP --> b
	POP --> a
	a != b --> PUSH

	type a = ALL
	type b = ALL

	*note: if types are different, result is always true
──────────────────────────────────────────────────────────────────────────────────
EQ                                                                  opcode[ 0x08 ]
	POP --> b
	POP --> a
	a == b --> PUSH

	type a = ALL
	type b = ALL

	*note: if types are different, result is always false
──────────────────────────────────────────────────────────────────────────────────
ADD                                                                 opcode[ 0x09 ]
	POP --> b
	POP --> a
	a + b --> PUSH

	type a = INT | FLOAT | STRING | ARR
	type b = INT | FLOAT | STRING | ARR

	*note: works as string concatenation if both are of type
	STRING, and likewise for ARR. Otherwise if one or more is FLOAT, result 
	will be FLOAT. If both are INT, result will be INT.
──────────────────────────────────────────────────────────────────────────────────
SUB                                                                 opcode[ 0x0A ]
	POP --> b
	POP --> a
	a - b --> PUSH

	type a = INT | FLOAT
	type b = INT | FLOAT
──────────────────────────────────────────────────────────────────────────────────
MUL                                                                 opcode[ 0x0B ]
	POP --> b
	POP --> a
	a * b --> PUSH

	type a = INT | FLOAT
	type b = INT | FLOAT

	*note: if both are INT, result will be INT. Otherwise,
	result will be FLOAT.
──────────────────────────────────────────────────────────────────────────────────
DIV                                                                 opcode[ 0x0C ]
	POP --> b
	POP --> a
	a / b --> PUSH

	type a = INT | FLOAT
	type b = INT | FLOAT

	*note: if both are INT, result will be INT. Otherwise,
	result will be FLOAT.
──────────────────────────────────────────────────────────────────────────────────
PLUS                                                                opcode[ 0x0D ]
	POP --> a
	+a --> PUSH

	type a = INT | FLOAT
──────────────────────────────────────────────────────────────────────────────────
MINUS                                                               opcode[ 0x0E ]
	POP --> a
	-a --> PUSH

	type a = INT | FLOAT
──────────────────────────────────────────────────────────────────────────────────
FUN_CALL args return                                                opcode[ 0x0F ]
	POP --> a
	POP --> b1
	POP --> b2
	     |
	     |
	POP --> b(args)
	a b1 b2 ... b(args) --> PUSH

	type a = FUN
	type b1 ... b(args) = ANY

	*note: if there are not enough arguments, result will 
	be FUN (closure is created). Otherwise, result is the 
	return value of the function call. If the function has
	no arguments, it must be called with null. [args] is 
	the number of arguments the function is being called 
	with and [return] is the return address for the pc.
	*note: [return] is the address relative to the current
	file. During runtime, this address will possibly be 
	shifted to allow importing other files. 
──────────────────────────────────────────────────────────────────────────────────
GET_ATTR attr                                                       opcode[ 0x10 ]
	POP --> a
	a.attr -> PUSH

	type a = STRUCT
──────────────────────────────────────────────────────────────────────────────────
ARR_IDX                                                             opcode[ 0x11 ]
	POP --> a
	POP --> b
	b[a] --> PUSH

	type a = INT
	type b = ARR | STRING
┌────────────────────────────────────────────────────────────────────────────────┐
│                           *** Instructions for loading and making literals *** │
└────────────────────────────────────────────────────────────────────────────────┘
LOAD_INT i                                                          opcode[ 0x12 ]
	i --> PUSH
──────────────────────────────────────────────────────────────────────────────────
LOAD_FLOAT f                                                        opcode[ 0x13 ]
	f --> PUSH
──────────────────────────────────────────────────────────────────────────────────
LOAD_NAME name                                                      opcode[ 0x14 ]
	name --> PUSH

	*note: looks in the environment stack starting from
	the topmost environment to dereference the name.
──────────────────────────────────────────────────────────────────────────────────
LOAD_BOOL bool                                                      opcode[ 0x15 ]
	bool --> PUSH

	*note: [bool] must be 1 or 0.
──────────────────────────────────────────────────────────────────────────────────
LOAD_NULL                                                           opcode[ 0x16 ]
	null --> PUSH
──────────────────────────────────────────────────────────────────────────────────
LOAD_STRING string                                                  opcode[ 0x17 ]
	string --> PUSH

	*note: [string] must have 'quotations' around it (to 
	differentiate from variable names).
──────────────────────────────────────────────────────────────────────────────────
MAKE_FUN addr argc arg0 arg1 ...                                    opcode[ 0x18 ]
	fun --> PUSH

	*note: [addr] is the byte address of the function and [argc] indicates 
	the number of subsequent argument names [arg0], [arg1], ...
	*note: [addr] is the address relative to the current
	file. During runtime, this address will possibly be 
	shifted to allow importing other files. 
──────────────────────────────────────────────────────────────────────────────────
MAKE_STRUCT                                                         opcode[ 0x19 ]
	struct --> PUSH

	*note: encapsulates the current environment in a struct and pushes
	it to the value stack.
──────────────────────────────────────────────────────────────────────────────────
MAKE_ARR len                                                        opcode[ 0x1A ]
	POP --> a1
	POP --> a2
		|
		|
	POP --> a(len)
	[a1, a2, ..., a(len)] -> PUSH

	type a1 ... an = ANY

	*note: [len] is the length of the array.
┌────────────────────────────────────────────────────────────────────────────────┐
│                                   *** Instructions for the virtual machine *** │
└────────────────────────────────────────────────────────────────────────────────┘
PUSH_ENV                                                            opcode[ 0x1B ]
	env --> PUSH_ENV
──────────────────────────────────────────────────────────────────────────────────
POP_ENV                                                             opcode[ 0x1C ]
	POP_ENV --> env
┌────────────────────────────────────────────────────────────────────────────────┐
│                                  *** Instructions for executing statements *** │
└────────────────────────────────────────────────────────────────────────────────┘
ASSIGN_NAME name                                                    opcode[ 0x1D ]
	POP -> a

	type a = ANY

	*note: [name] is the name of the variable to which the popped
	value is assigned.
──────────────────────────────────────────────────────────────────────────────────
STORE_ARR                                                           opcode[ 0x1E ]
	POP --> val
	POP --> idx
	POP --> arr
	arr[idx] = val

	type val = ANY
	type idx = INT
	type arr = ARR
──────────────────────────────────────────────────────────────────────────────────
STORE_ATTR name                                                     opcode[ 0x1F ]
	POP --> struct
	POP --> value
	struct.name = value

	type struct = STRUCT
	type value = ANY
──────────────────────────────────────────────────────────────────────────────────
STORE_NAME name                                                     opcode[ 0x20 ]
	
	*note: stores [name] in the current environment, initialized with 
	the null value.
──────────────────────────────────────────────────────────────────────────────────
RETURN                                                              opcode[ 0x21 ]
	POP --> value
	value --> PUSH

	type value = ANY

	*note: returns from a function and also handles changing the
	environment and popping the function off the call stack after
	which, the return value is pushed back to the value stack.
──────────────────────────────────────────────────────────────────────────────────
PRINT                                                               opcode[ 0x22 ]
	POP --> value
	print value

	type value = ANY
──────────────────────────────────────────────────────────────────────────────────
USE_FILE file name                                                  opcode[ 0x23 ]

	*note: compiles [file] (relative to the current directory) and 
	loads its global environment into a struct which is stored in 
	the variable [name] in the environment in which the command is
	called.
┌────────────────────────────────────────────────────────────────────────────────┐
│                                          *** Instructions for control flow *** │
└────────────────────────────────────────────────────────────────────────────────┘
BTRUE addr                                                          opcode[ 0x24 ]
	POP --> value
	if value
		pc = addr

	type value = BOOL

	*note: [addr] is the address relative to the current
	file. During runtime, this address will possibly be 
	shifted to allow importing other files. 
──────────────────────────────────────────────────────────────────────────────────
BFALSE addr                                                         opcode[ 0x25 ]
	POP --> value
	if not value
		pc = addr

	type value = BOOL

	*note: [addr] is the address relative to the current
	file. During runtime, this address will possibly be 
	shifted to allow importing other files. 
──────────────────────────────────────────────────────────────────────────────────
JMP addr                                                            opcode[ 0x26 ]
	pc = addr

	*note: [addr] is the address relative to the current
	file. During runtime, this address will possibly be 
	shifted to allow importing other files. 
──────────────────────────────────────────────────────────────────────────────────
HALT                                                                opcode[ 0x27 ]
	*note: sets the halt vm flag to true. 
┌────────────────────────────────────────────────────────────────────────────────┐
│                       *** Additional instructions for the standard library *** │
└────────────────────────────────────────────────────────────────────────────────┘
LEN_ARR                                                             opcode[ 0x28 ]
	POP --> value
	length(value) --> PUSH

	type value = ARR | STRING