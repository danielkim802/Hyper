variable : [SPACE] NAME [SPACE]

fun_def : FUNDEF (SPACE NAME)* (NEWLINE | SPACE)* LBRACE compound_stmt RBRACE

struct_def : STRUCTDEF (NEWLINE | SPACE)* LBRACE compound_stmt RBRACE

array_def : LBRACKET (NEWLINE | SPACE)* [expr (NEWLINE | SPACE)* (COMMA (NEWLINE | SPACE)* expr (NEWLINE | SPACE)*)*] RBRACKET

factor : INT | FLOAT | NAME | BOOL | STRING | NULL
       | fun_def | struct_def | array_def
       | LPAREN expr RPAREN

array_index : LBRACKET (NEWLINE | SPACE)* expr (NEWLINE | SPACE)* RBRACKET

get_attr : factor (array_index* DOT factor)* array_index*

fun_call : [SPACE] get_attr (SPACE get_attr)* [SPACE]

unary_op : (ADD | SUB)* fun_call

term : unary_op ((MUL | DIV) unary_op)*

arith_expr : term ((ADD | SUB) term)*

comp_expr : arith_expr ((LT | LTE | GT | GTE | NE | EQ) arith_expr)*

bool_factor : [SPACE] [NOT] comp_expr

bool_term : bool_factor (AND bool_factor)*

bool_expr : bool_term (OR bool_term)* 

pipe_expr : bool_expr (PIPE bool_expr)*

expr : pipe_expr

assign_stmt : attr_ref (ASSIGN | AASSIGN | SASSIGN | MASSIGN | DASSIGN) expr

declaration_stmt : VAR SPACE variable [ASSIGN expr]

if_stmt : IF expr (NEWLINE | SPACE)* LBRACE compound_stmt RBRACE 
          ((NEWLINE | SPACE)* ELIF expr (NEWLINE | SPACE)* LBRACE compound_stmt RBRACE)* 
          [(NEWLINE | SPACE)* ELSE (NEWLINE | SPACE)* LBRACE compound_stmt RBRACE] [SPACE]

return_stmt : RETURN [expr]

while_stmt : WHILE expr (NEWLINE | SPACE)* LBRACE compound_stmt RBRACE

for_stmt : FOR SPACE NAME SPACE IN expr (NEWLINE | SPACE)* LBRACE compound_stmt RBRACE

print_stmt : PRINT [expr]

statement : expr | assign_stmt | if_stmt | return_stmt | while_stmt | for_stmt | print_stmt | declaration_stmt

compound_stmt : ((statement | [SPACE]) NEWLINE)* [statement | SPACE]

program : compound_stmt EOF